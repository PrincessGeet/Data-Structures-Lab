/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package geetali.avl;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.util.Scanner;

/**
 *
 * @author Student
 */class Node { 
        int key,height; 
        Node left, right; 
  
        public Node(int ele) { 
            key = ele; 
            height=1; 
        }    
 }
public class avltree {
       
    Node root;
     int height(Node he)
     { 
        if (he == null) 
            return 0; 
  
        return he.height; 
    } 
     int max(int a, int b) { 
        return (a > b) ? a : b; 
    }
     Node rightRotate(Node y) { 
        Node x = y.left; 
        Node T2 = x.right;
        x.right = y; 
        y.left = T2; 
        y.height = max(height(y.left), height(y.right)) + 1; 
        x.height = max(height(x.left), height(x.right)) + 1; 
        return x; 
    } 

    Node leftRotate(Node x) { 
        Node y = x.right; 
        Node T2 = y.left; 
        y.left = x; 
        x.right = T2; 
        x.height = max(height(x.left), height(x.right)) + 1; 
        y.height = max(height(y.left), height(y.right)) + 1; 
        return y; 
    } 
    int getBalance(Node N) { 
        if (N == null) 
            return 0; 
        return height(N.left) - height(N.right); 
    } 
  
     
     
 public void insert(int key) 
        { 
       root = insertRec(root, key); 
        } 
     
       Node insertRec(Node root, int key) 
       { 
        if (root == null) { 
            root = new Node(key); 
            return root; 
        }
        if (key < root.key) 
            root.left = insertRec(root.left, key); 
        else if (key > root.key) 
            root.right = insertRec(root.right, key); 
        else
        return root; 
         root.height = 1 + max(height(root.left),height(root.right)); 
         int balance = getBalance(root);
         //left left case
         if (balance > 1 && key < root.left.key) 
            return rightRotate(root); 
  
        // Right Right Case 
        if (balance < -1 && key > root.right.key) 
            return leftRotate(root); 
  
        // Left Right Case 
        if (balance > 1 && key > root.left.key) { 
            root.left = leftRotate(root.left); 
            return rightRotate(root); 
        } 
  
        // Right Left Case 
        if (balance < -1 && key < root.right.key) { 
            root.right = rightRotate(root.right); 
            return leftRotate(root); 
        } 
        return root; 
    } 
    
   
   
    
     public void delete(int key) 
    { 
    
        root = deleteNode(root, key); 
    }

    Node minValueNode(Node node)  
    {  
        Node current = node;  
        while (current.left != null)  
        current = current.left;  
        return current;  
    }  
  
    Node deleteNode(Node root, int key)  
    {  
        if (root == null)  
            return root;  
        if (key < root.key)  
            root.left = deleteNode(root.left, key);   
        else if (key > root.key)  
            root.right = deleteNode(root.right, key);  
        else
        {  
            if ((root.left == null) || (root.right == null))  
            {  
                Node temp = null;  
                if (temp == root.left)  
                    temp = root.right;  
                else
                    temp = root.left; 
                if (temp == null)  
                {  
                    temp = root;  
                    root = null;  
                }  
                else
                    root = temp;
            }  
            else
            {  
                Node temp = minValueNode(root.right);  
                root.key = temp.key;   
                root.right = deleteNode(root.right, temp.key);  
            }  
        }
        if (root == null) { 
            root = new Node(key); 
            return root; 
        }
        if (key < root.key) 
            root.left = insertRec(root.left, key); 
        else if (key > root.key) 
            root.right = insertRec(root.right, key); 
        else
        return root; 
         root.height = 1 + max(height(root.left),height(root.right)); 
         int balance = getBalance(root);
         //left left case
         if (balance > 1 && key < root.left.key) 
            return rightRotate(root); 
  
        // Right Right Case 
        if (balance < -1 && key > root.right.key) 
            return leftRotate(root); 
  
        // Left Right Case 
        if (balance > 1 && key > root.left.key) { 
            root.left = leftRotate(root.left); 
            return rightRotate(root); 
        } 
  
        // Right Left Case 
        if (balance < -1 && key < root.right.key) { 
            root.right = rightRotate(root.right); 
            return leftRotate(root); 
        } 
        return root; 
    }  
    public void preorder(Node node) { 
        if (node != null) { 
            System.out.print(node.key + " "); 
            preorder(node.left); 
            preorder(node.right); 
        } 
    }
       public void preorder()  { 
           if(root==null)
           {
            System.out.println("No Elements present in the tree ");   
           }
           else{
       System.out.println("Elements in tree are : ");
       preorder(root); 
    } 
       }
    

  

    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        avltree tree=new avltree();
          int i,choice;
        char ch;
        do
        {
            
        System.out.println("1. Insert ");
        System.out.println("2. Display ");
        System.out.println("3. Delete ");
        System.out.print(" Enter Your Appropriate Option  ");
        choice=sc.nextInt();
      
        
        switch(choice)
        {
            case 1:
                System.out.print("Enter How many elements you want to enter : ");
                int n=sc.nextInt();
                System.out.println("Enter the Data : ");
                for(i=0;i<n;i++)
                 {
                  tree.insert(sc.nextInt());
                   }
                break;
            case 2:
                tree.preorder();
                break;
            case 3:
                System.out.print("Enter the element to be deleted : ");
                tree.delete(sc.nextInt());
                break;
         
            default:
                System.out.print("Invalid ");
        }
        System.out.println("\n\n Do you Want to continue(Y/N)");
         ch=sc.next().charAt(0);       
        }
        while(ch=='Y'||ch=='y');
       
    }  
    }
    
    
    


        
    